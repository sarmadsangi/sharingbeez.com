@function calculateRem($size) {
    $remSize: calc($size / 16px);
    @return #{$remSize}rem;
}

@mixin remCalc($size) {
    font-size: $size; //Fallback in px
    font-size: calculateRem($size);
}

@keyframes fadeInAnimation {
    0% {
        opacity: 0;
    }
    100% {
        opacity: 1;
    }
}

@mixin fadeInPage() {
    animation: fadeInAnimation ease 0.75s;
    animation-iteration-count: 1;
    animation-fill-mode: forwards;
}

$breakpoints: (
    "xsmall": 0px,
    "small": 320px,
    "medium": 640px,
    "xmedium": 800px,
    "large": 960px,
    "xlarge": 1024px,
    "xxlarge": 1200px,
) !default;

/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to($breakpoint) {
    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {
        // Prints a media query based on the value
        @media (max-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    }

    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
          + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}

@mixin unlist() {
    list-style: none;
    padding: 0;
    margin: 0;
}

@mixin h1() {
    @include remCalc(44px);
    font-weight: 400;
    line-height: 55px;
    color: $white;
}

@mixin h2() {
    @include remCalc(30px);
    font-weight: 400;
    line-height: 30px;
}

@mixin h3() {
    @include remCalc(24px);
    font-weight: 400;
    color: $primaryGreen;
}

@mixin h4() {
    @include remCalc(20px);
    font-weight: 700;
    color: $dark;
}
